library(devtools)
library(usethis)
devtools::document()
devtools::check()
install.packages("devtools")
devtools::document()
devtools::install()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
install.packages("profvis")
library(profvis)
library(dandelion)
zip_file_path <- "C:/Users/esanc/Desktop/ESA/3_Study/1_MSc_LOEK/M15_Masterarbeit/benchmarking/T32TMT/S2A_MSIL2A_20200723T103031_N0214_R108_T32TMT_20200723T142801.zip"
devtools::load_all()
zip_file_path <- "C:/Users/esanc/Desktop/ESA/3_Study/1_MSc_LOEK/M15_Masterarbeit/benchmarking/T32TMT/S2A_MSIL2A_20200723T103031_N0214_R108_T32TMT_20200723T142801.zip"
profvis(s2_manipulate(zip_file_path, band_name = "B02", manipulation = "increase", increment = 0.2, folder_structure = "tilenames"))
zip_file_path <- "C:/Users/esanc/Desktop/ESA/3_Study/1_MSc_LOEK/M15_Masterarbeit/benchmarking/T32TMT/S2A_MSIL2A_20200723T103031_N0214_R108_T32TMT_20200723T142801.zip"
zip_file_path <- "C:/Users/esanc/Desktop/ESA/3_Study/1_MSc_LOEK/M15_Masterarbeit/benchmarking/T32TMT/S2A_MSIL2A_20200723T103031_N0214_R108_T32TMT_20200723T142801.zip"
profvis(s2_manipulate(zip_file_path, band_name = "B02", manipulation = "increase", increment = 0.2, folder_structure = "tilenames"))
unzip(zip_file_path, list = TRUE)
devtools::check()
devtools::document()
pkgload::dev_help('config_sh')
devtools::check()
filecopy.batch <- function(path, by="type"){ # important: end path with /
if (!endsWith(path, "/")) path <- paste0(path, "/")
directories <- list.files(path, full.names = TRUE, recursive = FALSE)
log <- list()  # ADDED: initialize log
for (i in 1:length(directories)) {
files <- list.files(directories[i], full.names = TRUE, recursive = TRUE) # files of one course
files <- substr(files, nchar(path) + 1, nchar(files))
types <- unique(substr(files, nchar(files) - 3, nchar(files)))
types <- sub(".*\\.", "", types) # file types of one course without dots
for (j in 1:length(types)) {
dest_dir <- paste0(directories[i], "/", types[j])
if (!dir.exists(dest_dir)) dir.create(dest_dir)
u <- files[grepl(paste0(".*", paste(types[j], collapse = "|"), "$"), files)]
for (k in 1:length(u)) {
setwd(path)
original_file <- u[k]
dest_file <- paste0(dest_dir, "/", basename(original_file))
if (file.exists(dest_file)) {
base <- tools::file_path_sans_ext(basename(original_file))
ext <- tools::file_ext(original_file)
counter <- 1
repeat {
new_name <- paste0(base, "_", counter, ".", ext)
dest_file <- file.path(dest_dir, new_name)
if (!file.exists(dest_file)) break
counter <- counter + 1
}
}
copied <- file.copy(original_file, dest_file)
# ADDED: log the copy action
log[[length(log) + 1]] <- list(
from = original_file,
to = dest_file,
success = copied
)
}
}
}
print("Task finished")
return(log)  # ADDED: return the log (invisible if you don't assign it)
}
filecopy.batch("C:\Users\esanc\Desktop\file_test")
filecopy.batch("C:/Users/esanc/Desktop/file_test")
warnings()
filecopy.batch <- function(path, by = "type") {
if (!endsWith(path, "/")) path <- paste0(path, "/")
directories <- list.dirs(path, full.names = TRUE, recursive = FALSE)
log <- list()
sorted_base <- file.path(path, "files_sorted")        # ADDED: base folder for sorted files
if (!dir.exists(sorted_base)) dir.create(sorted_base) # ADDED
for (i in seq_along(directories)) {
files <- list.files(directories[i], full.names = TRUE, recursive = TRUE)
files_rel <- substr(files, nchar(path) + 1, nchar(files))
types <- unique(tools::file_ext(files_rel))
for (j in seq_along(types)) {
file_type <- types[j]
dest_dir <- file.path(sorted_base, file_type)            # CHANGED: write to files_sorted/type
if (!dir.exists(dest_dir)) dir.create(dest_dir)
files_to_copy <- files[tools::file_ext(files) == file_type]
for (k in seq_along(files_to_copy)) {
original_file <- files_to_copy[k]
dest_file <- file.path(dest_dir, basename(original_file))
# Resolve name conflicts
if (file.exists(dest_file)) {
base <- tools::file_path_sans_ext(basename(original_file))
ext <- tools::file_ext(original_file)
counter <- 1
repeat {
new_name <- paste0(base, "_", counter, ".", ext)
dest_file <- file.path(dest_dir, new_name)
if (!file.exists(dest_file)) break
counter <- counter + 1
}
}
copied <- file.copy(original_file, dest_file)
log[[length(log) + 1]] <- list(
from = original_file,
to = dest_file,
success = copied
)
}
}
}
print("Task finished")
return(log)
}
filecopy.batch("C:/Users/esanc/Desktop/file_test")
filecopy.batch <- function(path, by = "type") {
if (!endsWith(path, "/")) path <- paste0(path, "/")
sorted_base <- file.path(path, "files_sorted")
if (!dir.exists(sorted_base)) dir.create(sorted_base)
entries <- list.files(path, full.names = TRUE, recursive = FALSE)
log <- list()
rename_counter <- 0
temp_dirs <- c()  # for cleanup
for (entry in entries) {
if (dir.exists(entry)) {
source_dir <- entry
} else if (grepl("\\.zip$", entry, ignore.case = TRUE)) {
unzip_dir <- tempfile(pattern = "unzipped_")
dir.create(unzip_dir)
unzip(entry, exdir = unzip_dir)
source_dir <- unzip_dir
temp_dirs <- c(temp_dirs, unzip_dir)
} else {
next  # skip non-folder/non-zip
}
files <- list.files(source_dir, full.names = TRUE, recursive = TRUE)
for (file in files) {
if (!file.exists(file) || dir.exists(file)) next  # skip dirs or broken links
if (by == "type") {
category <- tools::file_ext(file)
if (category == "") category <- "no_ext"
} else if (by == "date") {
mod_time <- file.info(file)$mtime
category <- format(mod_time, "%Y-%m-%d")
} else {
stop("Invalid 'by' argument. Use 'type' or 'date'.")
}
dest_dir <- file.path(sorted_base, category)
if (!dir.exists(dest_dir)) dir.create(dest_dir)
dest_file <- file.path(dest_dir, basename(file))
# Resolve name conflict
if (file.exists(dest_file)) {
base <- tools::file_path_sans_ext(basename(file))
ext <- tools::file_ext(file)
counter <- 1
repeat {
new_name <- paste0(base, "_", counter, ifelse(ext != "", paste0(".", ext), ""))
dest_file <- file.path(dest_dir, new_name)
if (!file.exists(dest_file)) break
counter <- counter + 1
}
rename_counter <- rename_counter + 1
}
copied <- file.copy(file, dest_file)
if (copied) {
log[[length(log) + 1]] <- category
}
}
}
# Cleanup temporary unzipped folders
unlink(temp_dirs, recursive = TRUE)
# Build summary
log_table <- table(unlist(log))
cat("✅ Copy Summary:\n")
cat(" - Total files copied:", length(log), "\n")
cat(" - Files sorted into:\n")
print(log_table)
cat(" - Files renamed due to conflict:", rename_counter, "\n")
invisible(log_table)
}
filecopy.batch("C:/Users/esanc/Desktop/test_folder/M9Boden-2023_2_1740835621.zip")
filecopy.batch <- function(path, by = "type") {
is_zip <- grepl("\\.zip$", path, ignore.case = TRUE)
# Normalize base path
if (is_zip) {
base_path <- dirname(path)
zip_file <- path
} else {
if (!endsWith(path, "/")) path <- paste0(path, "/")
base_path <- path
}
sorted_base <- file.path(base_path, "files_sorted")
if (!dir.exists(sorted_base)) dir.create(sorted_base)
log <- list()
rename_counter <- 0
temp_dirs <- c()
# Determine input sources
if (is_zip) {
unzip_dir <- tempfile(pattern = "unzipped_")
dir.create(unzip_dir)
unzip(zip_file, exdir = unzip_dir)
sources <- unzip_dir
temp_dirs <- c(temp_dirs, unzip_dir)
} else {
entries <- list.files(base_path, full.names = TRUE, recursive = FALSE)
sources <- entries[dir.exists(entries) | grepl("\\.zip$", entries, ignore.case = TRUE)]
}
for (entry in sources) {
if (dir.exists(entry)) {
source_dir <- entry
} else if (grepl("\\.zip$", entry, ignore.case = TRUE)) {
unzip_dir <- tempfile(pattern = "unzipped_")
dir.create(unzip_dir)
unzip(entry, exdir = unzip_dir)
source_dir <- unzip_dir
temp_dirs <- c(temp_dirs, unzip_dir)
} else {
next
}
files <- list.files(source_dir, full.names = TRUE, recursive = TRUE)
for (file in files) {
if (!file.exists(file) || dir.exists(file)) next
if (by == "type") {
category <- tools::file_ext(file)
if (category == "") category <- "no_ext"
} else if (by == "date") {
mod_time <- file.info(file)$mtime
category <- format(mod_time, "%Y-%m-%d")
} else {
stop("Invalid 'by' argument. Use 'type' or 'date'.")
}
dest_dir <- file.path(sorted_base, category)
if (!dir.exists(dest_dir)) dir.create(dest_dir)
dest_file <- file.path(dest_dir, basename(file))
# Name conflict resolution
if (file.exists(dest_file)) {
base <- tools::file_path_sans_ext(basename(file))
ext <- tools::file_ext(file)
counter <- 1
repeat {
new_name <- paste0(base, "_", counter, ifelse(ext != "", paste0(".", ext), ""))
dest_file <- file.path(dest_dir, new_name)
if (!file.exists(dest_file)) break
counter <- counter + 1
}
rename_counter <- rename_counter + 1
}
copied <- file.copy(file, dest_file)
if (copied) {
log[[length(log) + 1]] <- category
}
}
}
# Cleanup
unlink(temp_dirs, recursive = TRUE)
# Summary
log_table <- table(unlist(log))
cat("✅ Copy Summary:\n")
cat(" - Total files copied:", length(log), "\n")
if (length(log_table) > 0) {
cat(" - Files sorted into:\n")
print(log_table)
} else {
cat(" - No files found or copied.\n")
}
cat(" - Files renamed due to conflict:", rename_counter, "\n")
invisible(log_table)
}
filecopy.batch("C:/Users/esanc/Desktop/test_folder/M9Boden-2023_2_1740835621.zip")
devtools::check()
available::available("funky", browse = F)
available::available("funky")
install.packages("available")
install.packages("available")
available::available("funky")
available::available("dandelion")
available::available("dandelion", browse = F)
available::available("funky", browse = F)
devtools::check()
wcover = "2020"
year = "2020"
tile="T32ULB"
directory="/home/emilio/GCHM"
file.path(directory, "deploy_example","sentinel2", year, tile)
file.path(directory, "deploy_example","image_paths",year)
file.path(directory,"deploy_example", "image_paths", year, tile, ".txt")
file.path(directory,"deploy_example", "image_paths", year, paste0(tile, ".txt"))
file.path(directory,"global_config.sh")
img_folder <- file.path(directory, "deploy_example","sentinel2", year, tile)
zip_files <- "testfilename.xy"
zip_files <- list("testfilename.xy", "blabliblub")
paste0(img_folder, zip_files[1])
### Configure File
config_values <- list(
YEAR = year,
DEPLOY_IMAGE_PATH= file.path(img_folder, zip_files[1]),
GCHM_DEPLOY_DIR= paste0("./deploy_example/predictions/",year,"/",tile),
tile_name=tile,
wcover = wcover
)
file.path(img_folder, zip_files[1])
file.path("./deploy_example","predictions",year, tile)
devtools::check()
devtools::check()
devtools::check()
devtools::update_packages()
devtools::document()
devtools::check()
devtools::check()
file.path(rootDIR, "final_results")
devtools::check()
devtools::check()
tiles = c("T31UGT", "T32ULB","T33UUT")
bands = c("B03", "B04", "B08")
increments = c(0.05, 0.1, 0.15, 0.2)
decrease = c("False", "True")
year = "2020"
base_folder = "/home/emilio/canopy_height"
df <- expand.grid(
tile_name = tiles,
band = bands,
decrease = decrease,
increment = increments,
year = year,
rootDIR = base_folder,
WC_year = worldcover,
stringsAsFactors = FALSE
)
worldcover = "2020"
df <- expand.grid(
tile_name = tiles,
band = bands,
decrease = decrease,
increment = increments,
year = year,
rootDIR = base_folder,
WC_year = worldcover,
stringsAsFactors = FALSE
)
base_folder <- normalizePath(base_folder)
df$tile_name <- trimws(df$tile_name)
tile_folder <- file.path(base_folder, "deploy_example","sentinel2", year)
df$tile_folder <- file.path(tile_folder, df$tile_name)
View(df)
# Build path to tile folder with the images
df$tile_name <- trimws(df$tile_name)
tile_folder <- file.path(base_folder, "deploy_example","sentinel2", year)
df$tile_folder <- file.path(tile_folder, df$tile_name)
# Build output name that is used for saving/copying
df$out_name <- paste0(df$tile_name,"_",
df$band,"_",
sub("0\\.", "", formatC(df$increment, format = "f", digits = 2)),"_",
ifelse(df$decrease == "False","I","D"))
# Add one row per tile for the original prediction (no manipulation)
for (t in unique(tiles)) {
extra_row <- data.frame(
tile_name = t,
band = df$band[1],
decrease = "True",
increment = 0,
year = year[1],  # or another default if length(year) > 1
rootDIR = base_folder,
WC_year = worldcover,
stringsAsFactors = FALSE
)
extra_row$tile_folder <- file.path(tile_folder, t)
extra_row$out_name <- paste0(t, "_original")
df <- rbind(extra_row, df)
}
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_mit_license("Emilio Sánchez")
devtools::check()
usethis::use_build_ignore("dandelion-Ex.timings")
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
gitcreds::gitcreds_set()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
tempfile(fileext = ".txt")
devtools::check()
devtools::test()
tempdir()
tempdir()
devtools::test()
devtools::check()
usethis::use_citation()
paste("R package version", pkg$Version)
format(Sys.Date(), "%Y")
tools::showNonASCIIfile("inst/CITATION")
file <- "inst/CITATION"
txt <- readLines(file, encoding = "UTF-8")
writeLines(txt, file, useBytes = FALSE)
tools::showNonASCIIfile("inst/CITATION")
Sys.getlocale()
Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
tools::showNonASCIIfile("inst/CITATION")
file <- "inst/CITATION"
# Read as raw bytes, then convert explicitly
txt_raw <- readLines(file, encoding = "bytes")
txt_utf8 <- iconv(txt_raw, from = "latin1", to = "UTF-8")
# Overwrite the file properly encoded
writeLines(txt_utf8, file, useBytes = FALSE)
# Verify
tools::showNonASCIIfile(file)
file <- "inst/CITATION"
# 1. Read as raw bytes (no encoding interpretation)
txt_raw <- readLines(file, encoding = "bytes")
# 2. Decode assuming the text was *already UTF-8 but saved as Latin-1 twice*
#    We first interpret those bytes as Latin-1, then decode properly to UTF-8.
txt_fixed <- iconv(txt_raw, from = "UTF-8", to = "UTF-8")
# 3. Overwrite the file, forcing UTF-8 encoding
writeLines(txt_fixed, file, useBytes = FALSE)
# 4. Verify that no non-ASCII characters remain unrecognized
tools::showNonASCIIfile(file)
txt_fixed <- iconv(txt_raw, from = "UTF-8", to = "latin1")
txt_fixed <- iconv(txt_fixed, from = "latin1", to = "UTF-8")
writeLines(txt_fixed, file, useBytes = FALSE)
tools::showNonASCIIfile(file)
citation("dandelion")
unlink("inst/CITATION")
cat('## -*- coding: utf-8 -*-
citHeader("To cite dandelion in publications use:")
bibentry(
bibtype = "Manual",
title   = "Neural-Network Deployment Tools for Geodata",
author  = person("Emilio", "Sánchez"),
year    = "2025",
url     = "https://github.com/ESA99/dandelion",
textVersion = "Emilio Sánchez (2025). Neural-Network Deployment Tools for Geodata. https://github.com/ESA99/dandelion"
)
', file = "inst/CITATION", fileEncoding = "UTF-8")
tools::showNonASCIIfile("inst/CITATION")
unlink("inst/CITATION")  # remove broken file
dir.create("inst", showWarnings = FALSE)
cat('## -*- coding: utf-8 -*-
citHeader("To cite dandelion in publications use:")
bibentry(
bibtype = "Manual",
title   = "Neural-Network Deployment Tools for Geodata",
author  = person("Emilio", "Sánchez"),
year    = "2025",
url     = "https://github.com/ESA99/dandelion",
textVersion = "Emilio Sánchez (2025). Neural-Network Deployment Tools for Geodata. https://github.com/ESA99/dandelion"
)
', file = "inst/CITATION", fileEncoding = "UTF-8")
tools::showNonASCIIfile("inst/CITATION")
citation("dandelion")
txt <- readLines("inst/CITATION", encoding = "UTF-8")
writeLines(txt, "inst/CITATION", useBytes = FALSE)
tools::showNonASCIIfile("inst/CITATION")
citation("dandelion")
tools::showNonASCIIfile("inst/CITATION")
citation("dandelion")
unlink("inst/CITATION")
dir.create("inst", showWarnings = FALSE)
cat('## -*- coding: utf-8 -*-
citHeader("To cite dandelion in publications use:")
bibentry(
bibtype = "Manual",
title   = "Neural-Network Deployment Tools for Geodata",
author  = person("Emilio", "Sánchez"),
year    = "2025",
url     = "https://github.com/ESA99/dandelion",
textVersion = "Emilio Sánchez (2025). Neural-Network Deployment Tools for Geodata. https://github.com/ESA99/dandelion"
)
', file = "inst/CITATION", fileEncoding = "UTF-8")
tools::showNonASCIIfile("inst/CITATION")
tools::showNonASCIIfile("inst/CITATION")
citation("dandelion")
